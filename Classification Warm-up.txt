<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML Steps Breakdown</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; color: #333; line-height: 1.6; }
        h1 { color: #007bff; border-bottom: 2px solid #ccc; padding-bottom: 10px; }
        h2 { color: #28a745; margin-top: 25px; border-bottom: 1px dashed #eee; padding-bottom: 5px; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        th { background-color: #f8f9fa; color: #495057; }
        .alert { background-color: #ffe5e5; color: #dc3545; padding: 10px; border-radius: 5px; margin-top: 15px; border: 1px solid #f5c6cb; }
        .code { font-family: Consolas, monospace; background-color: #f4f4f4; padding: 2px 4px; border-radius: 3px; }
    </style>
</head>
<body>

    <h1>ü§ñ The 4 Steps of a Machine Learning Project</h1>
    <p>Understanding this four-step structure is more important than memorizing any single line of code. Every ML project, whether simple or complex, follows this process.</p>

    <hr>

    <h2>Step 1: Data Preparation (<span class="code">The Setup üõ†Ô∏è</span>)</h2>
    <p>This initial phase is where you acquire, load, and organize your raw data.</p>
    
    <table>
        <thead>
            <tr>
                <th>Component</th>
                <th>Example Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><strong>Data Load</strong></td>
                <td><span class="code">iris = load_iris()</span></td>
                <td>Loads the raw dataset into your environment.</td>
            </tr>
            <tr>
                <td><strong>Features (<span class="code">X</span>)</strong></td>
                <td><span class="code">X = iris.data</span></td>
                <td><strong>The Inputs.</strong> These are the measured values or variables the model uses to make a decision.</td>
            </tr>
            <tr>
                <td><strong>Target (<span class="code">y</span>)</strong></td>
                <td><span class="code">y = iris.target</span></td>
                <td><strong>The Output/Answer.</strong> This is the correct value or category the model is trying to predict.</td>
            </tr>
        </tbody>
    </table>

    <hr>

    <h2>Step 2: Data Splitting (<span class="code">The Test üìù</span>)</h2>
    <p>This is the most critical conceptual step, ensuring the model is tested fairly on data it has never seen.</p>
    
    <table>
        <thead>
            <tr>
                <th>Component</th>
                <th>Example Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><strong>Split Function</strong></td>
                <td><span class="code">train_test_split(...)</span></td>
                <td>Randomly divides the full dataset into four distinct subsets.</td>
            </tr>
            <tr>
                <td><strong>Training Sets</strong></td>
                <td><span class="code">X_train</span> & <span class="code">y_train</span></td>
                <td>The large portion used for the model to <strong>learn</strong> from (the "homework").</td>
            </tr>
            <tr>
                <td><strong>Testing Sets</strong></td>
                <td><span class="code">X_test</span> & <span class="code">y_test</span></td>
                <td>The small portion held back for the final <strong>evaluation</strong> (the "pop quiz").</td>
            </tr>
        </tbody>
    </table>

    <div class="alert">
        <strong>üö® Why Splitting is Essential (Avoiding Overfitting)</strong><br>
        If you train and test on the same data, the model will simply <strong>memorize</strong> the answers instead of learning the underlying patterns. This leads to artificially high scores that immediately fail in a real-world scenario‚Äîa condition known as <strong>overfitting</strong>.
    </div>

    <hr>

    <h2>Step 3: Training (<span class="code">The Learning üß†</span>)</h2>
    <p>This is the phase where the algorithm studies the patterns in the training data and builds its rule set.</p>
    
    <table>
        <thead>
            <tr>
                <th>Component</th>
                <th>Example Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><strong>Model Choice</strong></td>
                <td><span class="code">model = DecisionTreeClassifier()</span></td>
                <td>Selecting the algorithm. It builds a set of nested "if/then" rules to make decisions.</td>
            </tr>
            <tr>
                <td><strong>Training Action</strong></td>
                <td><span class="code">model.fit(X_train, y_train)</span></td>
                <td>Executes the <strong>learning</strong>. The model examines the features in <span class="code">X_train</span> and learns how they map to the correct targets in <span class="code">y_train</span>.</td>
            </tr>
        </tbody>
    </table>

    <hr>

    <h2>Step 4: Prediction and Evaluation (<span class="code">The Result ‚úÖ</span>)</h2>
    <p>The final step is assessing how well the trained model can perform its task on unseen data.</p>
    
    <table>
        <thead>
            <tr>
                <th>Component</th>
                <th>Example Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><strong>Prediction</strong></td>
                <td><span class="code">y_pred = model.predict(X_test)</span></td>
                <td>The model generates its predicted answers (<span class="code">y_pred</span>) using the features from the held-back test data (<span class="code">X_test</span>).</td>
            </tr>
            <tr>
                <td><strong>Evaluation</strong></td>
                <td><span class="code">accuracy = accuracy_score(y_test, y_pred)</span></td>
                <td>Compares the model's predictions against the true answers to calculate a final performance metric (e.g., accuracy, precision, or error).</td>
            </tr>
        </tbody>
    </table>

</body>
</html>
